name: Pipeline de Producción

on:
  push:
    branches:
      - main  # Se ejecuta cuando hay un push a la rama main

jobs:
  deploy:
    runs-on: ubuntu-latest  # Usa una máquina virtual con Ubuntu

    steps:
      # Paso 1: Obtener el código del repositorio
      - name: Checkout code
        uses: actions/checkout@v2

      # Paso 2: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Paso 3: Construir la imagen de Docker
      - name: Build Docker image
        run: docker build -t nombre-de-tu-app .

      # Paso 4: Ejecutar pruebas dentro del contenedor
      - name: Run tests in Docker
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}  # Accede al secret MONGODB_URI
        run: |
          docker run --env MONGO_URI=$MONGO_URI nombre-de-tu-app npm test

      # Paso 5: Verificar cobertura de pruebas
      - name: Check coverage
        run: |
          # Copiar el archivo de cobertura generado en el contenedor al host
          docker create --name test-container nombre-de-tu-app
          docker cp test-container:/app/coverage ./coverage
          docker rm test-container

          # Verificar la cobertura
          if [ $(grep -oP '(?<=All files\s+\|\s+)\d+' coverage/lcov-report/index.html) -lt 85 ]; then
            echo "Cobertura insuficiente (menos del 85%)"
            exit 1
          fi

      # Paso 6: Desplegar la aplicación en Vercel
      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "Desplegando a producción en Vercel..."
          npm install -g vercel
          vercel --token $VERCEL_TOKEN --prod